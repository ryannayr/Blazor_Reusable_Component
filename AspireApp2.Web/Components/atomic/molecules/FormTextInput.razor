@using System.Linq.Expressions
@typeparam T
<FormInputLabel Label="@Label" IsRequired = "IsRequired">
</FormInputLabel>
<SmartInput TValue="string" For="@(() => ((IStringValue)Model).Value)" CssClass="@(isValid ? string.Empty : "is-invalid")" Value="@(((IStringValue)Model).Value)" ValueChanged="@((val) => ((IStringValue)Model).Value = val)" ></SmartInput>
@code
{
    [Parameter] public required string Label { get; set; }
    [Parameter] public required bool IsRequired { get; set; }
    [Parameter] public required T Model { get; set; }

    [CascadingParameter] private EditContext CascadedEditContext { get; set; }
    private FieldIdentifier _fieldIdentifier;
    private bool isValid = true;

    protected override void OnParametersSet()
    {
        if (IsRequired)
        {
            var errorMessages = CascadedEditContext.GetValidationMessages(() => ((IStringValue)Model).Value);
            isValid = !errorMessages.Any();
        }
    }
}