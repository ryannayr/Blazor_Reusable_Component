@using System.Linq.Expressions
@using System.Globalization
@typeparam TValue

<input @attributes="AdditionalAttributes"
       value="@CurrentValueAsString"
       @onchange="HandleChange"
       class=" form-control @CssClass" />
@code {
    [Parameter] public TValue Value { get; set; }
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public string CssClass { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }

    private string CurrentValueAsString => Convert.ToString(BindConverter.FormatValue(Value)) ?? string.Empty;
        
    private async Task HandleChange(ChangeEventArgs e)
    {
        var raw = e.Value?.ToString();
        if (BindConverter.TryConvertTo<TValue>(raw, CultureInfo.CurrentCulture, out var parsed))
        {
            Value = parsed;
            await ValueChanged.InvokeAsync(Value);
        }
    }
}