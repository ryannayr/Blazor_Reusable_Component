@using System.Linq.Expressions

@typeparam T
<input type="text" class="form-control @(IsValid ? string.Empty : "is-invalid")" value="@Model" @onchange="HandleInputChanged" />

@code
{
    [Parameter] public required T Model { get; set; }
    [Parameter] public required bool IsValid { get; set; }
    [Parameter] public required string Identifier { get; set; }
    // [CascadingParameter] private EditContext CascadedEditContext { get; set; }
    // private FieldIdentifier _fieldIdentifier { get; set; }

    private void HandleInputChanged(ChangeEventArgs e)
    {
        // var newValue = e.Value?.ToString() ?? string.Empty;

        // if (Model != newValue)
        // {
        Model = (T)e.Value;

        //     Expression<Func<string>> exp = () => Model;
        //     string fielName = string.Empty;
        //     if (exp.Body is MemberExpression memberData)
        //         fielName = memberData.Member.Name;

        //     _fieldIdentifier = CascadedEditContext.Field(Identifier);
        //     CascadedEditContext.NotifyFieldChanged(_fieldIdentifier);
        // }
    }
}


