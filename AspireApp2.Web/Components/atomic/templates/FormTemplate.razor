@typeparam T
@implements IDisposable
<EditForm FormName="@($"{nameof(Model)}")" Enhance="true" EditContext="editContext">
    <FluentValidationValidator />

    @FormInputs(Model)

    <button type="submit" class="btn btn-primary mt-2" @onclick="Submit">
        Save
    </button>
</EditForm>

@code {
    [Parameter] public required T Model { get; set; }
    [Parameter] public required RenderFragment<T> FormInputs { get; set; }
    public required EditContext editContext;
    private EventHandler<FieldChangedEventArgs> _fieldChangedHandler;
    protected override void OnInitialized()
    {
       //  _fieldChangedHandler = (sender, args) =>
       // {
       //     editContext.NotifyValidationStateChanged();
       //     this.StateHasChanged();
       // };

        editContext = new EditContext(Model!);
        // editContext.OnFieldChanged += _fieldChangedHandler;
        base.OnInitialized();
    }

    public void Dispose()
    {
        // editContext.OnFieldChanged -= _fieldChangedHandler;
    }

    void Submit()
    {
        var isValid = editContext.Validate();
    }
}